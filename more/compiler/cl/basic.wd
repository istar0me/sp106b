# 第1章  簡介

## 1.1. 語言的種類

談到語言，一般人會想到「英文、中文、法語、日語」等等語言，這些語言是在人類歷史發展的過程當中逐漸被建構出來的，沒有任何人可以說他「設計出了中文」、「發明了英文」或「創造了法語」。
這種由歷史過程衍生出來的語言稱為「自然語言」，在資訊工程的領域，這是「自然語言處理」這個學科所必須面對與研究的課題。但是在一般領域，「自然語言」則是「語言學」所討論的議題。
自然語言並非刻意「設計出來的」，但是、有些語言卻是由某個人從無到有所創造設計出來的，像是「C 語言、Python、JavaScript、Ruby、Perl 」等程式語言，我們都可以查到其發明人是誰？這類的語言稱為人造語言。這種語言通常有非常明確固定的語法，我們可以透過電腦程式去「解釋」這些語言的語法，然後做出對應的動作。

除了「自然語言」與「人造語言」之外，還有一種語言，是將兩者混合所形成的語言，這種語言通常稱為標記語言，像是「HTML、XML、維基語言、Markdown、ReStructuredText」等，這類的語言乃是在自然語言上進行一些標記，以便讓程式可以透過標記進行對應的動作，像是加上粗體、加上超連結、顯示成表格、或者單純只是標記某個區塊的特性，像是 XML 的標記就是如此。
「計算語言學」就是研究如何透過電腦這個計算工具，用程式處理「自然語言、人造語言與標記語言」的一門學問。
傳統上、在資訊科學領域中，「計算語言學」幾乎是「自然語言處理」的同義詞，因為這是一個非常困難的研究領域，而且有很強的實用價值。像是「自然語言理解、人機對話系統、語音辨識、機器翻譯」等問題，都經常令資訊領域的研究者著迷，而投入一生的精力去研發能解決這些問題的程式。
但是在本書中，我們關注的對像不再只是自然語言，而是擴充到人造語言與標記語言上。因為在實務上，目前程式通常只能處理並理解「人造語言與標記語言」，很難對「自然語言」做到很好的理解。所以我們將「計算語言學」的領域擴充到這兩類語言上，讓讀者也能學到這方面的知識與技術。
因此、本書的範圍涵蓋面比「自然語言處理」這個學科更廣，因為納入了「程式語言、編譯器、解譯器設計、正規語言、正規表達式、全文檢索、維基語言的格式與轉換方法」等議題。
這種做法無疑會讓本書對「自然語言處理」部分的內容減少，而且研究深度降低。但是相對的也會讓本書的實用性大增，讓程式設計者能用這些語言處理知識去設計出更好的軟體系統，而這也正是本書希望能達到的目標。

### 1.1.1. 自然語言

常見的自然語言通常與國家種族有關，像是「英文、中文、日文」等等，以下是筆者從維基百科取出有關「Norm Chomsky」這位「生成語法」奠基者的描述，您應該可以大致感覺到到這三種語言的相異點，但是在這些表面的相異點背後，也隱含了某些相似點與共同點。這些共同點包含樹狀的語法結構，以及語意上深層的同義結構等等。

<table>
<tr><th>英文</th><th>中文</th><th>日文</th></tr>
<tr>
<td>
Avram Noam Chomsky (/ˈnoʊm ˈtʃɒmski/; born December 7, 1928) is an American linguist, philosopher,[6][7] cognitive scientist, logician,[8][9] historian, political critic, and activist. He is an Institute Professor and Professor (Emeritus) in the Department of Linguistics & Philosophy at MIT, where he has worked for over 50 years.[10] In addition to his work in linguistics, he has written on war, politics, and mass media, and is the author of over 100 books.[11] According to the Arts and Humanities Citation Index in 1992, Chomsky was cited as a source more often than any other living scholar from 1980 to 1992, and was the eighth most cited source overall.[12][13][14][15] He has been described as a prominent cultural figure, and he was voted the "world's top public intellectual" in a 2005 poll.[16][17]
</td><td>
艾弗拉姆·諾姆·杭士基博士（Avram Noam Chomsky，1928年12月7日－），或譯作「荷姆斯基」、「喬姆斯基」，是麻省理工學院語言學的榮譽退休教授。杭士基的生成語法被認為是20世紀理論語言學研究上的重要貢獻。他對伯爾赫斯·弗雷德里克·斯金納所著《口語行為》的評論，也有助於發動心理學的認知革命，挑戰1950年代研究人類行為和語言方式中佔主導地位的行為主義。他所採用以自然為本來研究語言的方法也大大地影響了語言和心智的哲學研究。他的另一大成就是建立了杭士基層級：根據文法生成力不同而對形式語言做的分類。杭士基還因他對政治的熱忱而著名，尤其是他對美國和其它國家政府的批評。從1960年評論越南戰爭以來，他的媒體和政治評論便越來越著名。一般認為他是活躍在美國政壇左派的主要知識分子。杭士基把自己歸為自由意志社會主義者，並且是無政府工團主義的同情者。據藝術和人文引文索引說，在1980年到1992年，杭士基是被文獻引用數最多的健在學者，並是有史以來被引用數第八多的學者。
</td><td>
エイヴラム・ノーム・チョムスキー（英語：Avram Noam Chomsky、1928年12月7日 - ）は、アメリカ合衆国の言語学者、哲学者、思想家。 マサチューセッツ工科大学教授。 言語学者・教育学者キャロル・チョムスキーは彼の妻である。

チョムスキーは1928年にフィラデルフィアのユダヤ系家庭に生まれた。 1949年、アイビーリーグの一つであるペンシルベニア大学を卒業、学士号取得する。1951年にペンシルベニア大学大学院修士課程修了、そして1955年、ペンシルベニア大学大学院博士課程を修了し、言語学の博士号を取得した。
</td></tr>
</table>


### 1.1.2. 標記語言

如果我們把上述維基百科的文章，切換到編輯模式以檢視原文，那麼您將會看到如下的「維基語法」，這種與法通常被稱為 MediaWiki 的語法，因為這是 MediaWiki 基金會所採用的維基語法。

![[]](wiki_table.jpg)

維基語法的種類其實有很多，除了 MediaWiki 之外、Markdown、ReStructuredText等都是常見的維基語法。筆者經常使用的 wikidot 維基網誌也有一套自己的語法，通常也就直接稱為 wikidot 語法，wikidot 語法語 MediaWiki 有些類似，卻也有許多不同點。

維基語法或許不能算是標記語言當中的典型，真正最為人所知的標記語言是 HTML 與 XML，讓我們來看看幾個關於 Chomsky 的範例。

![[]](XML_HTML_source.jpg)

![[]](XML_HTML.jpg)

在以上範例中，您可以很清楚的看到 HTML 與 XML 兩者之間的差別，雖然都是標記語言，HTML 顯然有點像在進行排版工作，而 XML 則單純只是用標記將內容框住的樹狀結構文件。

像 XML 這樣的標記語言雖然已經具有樹狀的結構化訊息了，但是由於內文經常還是自然語言，因此真正要用程式去理解語意內容時，仍然具有相當大的障礙。

雖然好的標記能夠提供程式不少的幫助，但是距離「完全理解」通常還有一段不小的目標。在這裡，所謂的「自然語言完全理解」其實是個很令人爭議的說法，因為何謂完全理解是一個難以定義的詞彙。


但是我想也沒有其他更傳神的說法了，筆者所說的「程式對自然語言完全理解」，就是像「解譯器對程式語言完全理解那樣」，可以精確的進行程式語言所描述的動作。舉例而言，假如有一句話說：「顯示 Yahoo 首頁！」輸入到那個「具備完全理解能力」的程式當中時，程式就會將您的瀏覽器打開並顯示 Yahoo 的首頁，這樣就是對該語句的完全理解了。

同樣的，如果使用者下了一個命令說「幫我找一個女朋友！」，此時那個「具備完全理解能力」的程式應該做甚麼樣的動作呢？

當然、假如那個程式做不到，那就只能回答：「抱歉！我做不到」。甚至再補上兩句：「我自己都沒有女朋友了，不過，我可以幫你上 facebook 請求加入一些女的好友，您覺得如何呢？」。

### 1.1.3. 人造語言

人造語言的種類很多，但大部分都是程式類的語言，像是高階語言 (像是 C、Ruby、Python)、組合語言 (像是 x86、ARM、CPU0 的組合語言)、還有高階語言在翻譯成組合語言之前通常會經過某種中介語言等等，以下是一些人造語言的範例。

![[]](C_assembly_table1.jpg)


程式語言不只可以用來寫程式，有些程式語言具有很特殊的用途，像是 Verilog/VHDL 就可以用來設計數位電路，而 SPICE 則可以用來設計類比電路。以下是這些語言的幾個範例。

![[]](verilog_VHDL_spice_table1.jpg)


## 1.2. 語言的層次

不論是以上哪些語言，幾乎都具有「詞彙、語句、文章」等三個層次，以下是這幾個層次的範例。


![[]](language_layer.jpg)

### 1.3. 語言的處理

電腦對於語言文字的處理方法，在程式語言上面已經相當得成熟，編譯器可以很容易的將高階語言程式轉換成組合語言或機器碼，以下是編譯器將高階程式轉為組合語言的一個範例。

![[]](compiler_example1.png)

另外、解譯器也很容易的可以執行程式，甚至也可以設計出一種稱為 Just in time (JIT) Compiler 的「編解譯混合技術」，在解譯過程中以編譯的方式去執行程式，這樣可以讓執行的速度變得更快，像是 Java 的 JVM 與 Google 的 JavaScript V8 JIT 引擎，都是採用這種混合模式製作的。

但是對於「自然語言的處理」而言，目前的電腦技術就顯得相當力不從心了，這點各位可以從「Google 翻譯」的品質就可以發現。Google 翻譯可以說是做得非常好的翻譯程式，但是當您輸入得是一整段文章時，通常 Google 翻譯出來的品質仍然是慘不忍睹的。以下是我們將維基百科中有關 Chomsky 的第一段文章輸入到 Google 翻譯中所呈現的結果，您可以看到一開始好像翻的不錯，後來就有一點落差了。

![[]](google_translate1.png)

而以下這段則是落差更大了。

![[]](google_translate2.png)

對於標記語言處理的品質，則與標記語言的類型有關，也與處理的目標很有關係。舉例而言，程式可以很容易的將 wiki 或 XML 標記語言轉換為 HTML 呈現出來，這只要用「字串比對」與「正規表達式」就可以輕易的做到。

但如果程式處理的對像是標記語言中的文字，那處理的品質通常會與標記所提供的資訊有關。舉例而言，如果要將英文的 wiki 文件翻譯成中文，那困難度就不亞於「自然語言的翻譯」了。但是如果要對某種具有良好 XML  語意標記的文件進行「文件摘要」的動作，那程式通常可以做得還不錯。

## 1.4. 語言的意義

如前所述，我們在「自然語言完全理解」的定義中，採用了類似「解譯器對程式語言完全理解那樣」的定義，也就是一但程式能精確執行使用者的命令或請求，那就算「程式理解了使用者的自然語言」。

但是即使有這樣的定義，那麼語言的意義應該表達成甚麼結構呢？需要表達成像語法理論中的語法樹結構嗎？還是需要加上不同的結構？或者是採用與樹狀結構完全不同的架構呢？

先讓我們看看程式語言的例子，對電腦而言，解譯器、編譯器都是可以「執行程式語言」的，因此符合了「程式理解語言」的定義。

那麼，編譯器與解譯器是如何執行程式語言的呢？

在編譯器中，程式語言被翻譯成一串機器指令，然後再交給CPU  去執行。

在解譯器當中，程式語言經過語法剖析成樹狀結構後，就可以直接解譯執行，解譯時除了使用語法樹之外，還必須建立一些「變數」的結構，然後在執行某個語法或指令時，透過修改變數模擬指令所要求的動作。

於是，我們可以將那些低階的指令串，視為「程式語言」的語意。

但是，「自然語言」的語意又是甚麼呢？我們可以將「自然語言」翻譯成甚麼「指令動作」呢？

先讓我們看看電腦的能力所在，電腦能執行的不過就是 CPU 指令集所描述的指令，因此若我們將「自然語言」翻譯成「CPU 指令串」，那就完成了理解的動作。

但是這樣的翻譯過程顯然太過遙遠，我們很難以想像如何將自然語言翻譯成「CPU 指令串」，但是我們比較能想像的是「自然語言」如何被翻譯成「一連串的動作」。

舉例而言，如果使用者說：「幫我把 facebook 打開，然後念出今天的留言給我聽」，這時候電腦將這句話翻譯成以下動作。

```
1. 打開瀏覽器
2. 連結到 http://www.facebook.com/
3. 輸入使用者的帳號密碼登入。
4. 登入後進入訊息畫面。
5. 將訊息畫面上的文字轉成語音輸出。
```

如果採用這種將「自然語言」翻譯成「一連串動作」的角度看，那麼「程式理解語言」就是「程式將語言轉換成一連串的動作，而這些動作符合使用者的請求」。


